/*
Deployment script for JBMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "JBMS"
:setvar DefaultFilePrefix "JBMS"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[JBMSAttachment]...';


GO
CREATE TABLE [dbo].[JBMSAttachment] (
    [TWSAttachmentID]    INT            IDENTITY (1, 1) NOT NULL,
    [TSWMessageID]       INT            NOT NULL,
    [href]               VARCHAR (50)   NOT NULL,
    [AttachmentDocument] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([TWSAttachmentID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSConfiguration]...';


GO
CREATE TABLE [dbo].[JBMSConfiguration] (
    [JBMSConfigurationID] INT           IDENTITY (1, 1) NOT NULL,
    [ConfigurationName]   VARCHAR (50)  NOT NULL,
    [ConfigurationValue]  VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([JBMSConfigurationID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSExtMessage]...';


GO
CREATE TABLE [dbo].[JBMSExtMessage] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [customerReference] VARCHAR (MAX)  NOT NULL,
    [docId]             VARCHAR (50)   NULL,
    [documentSize]      VARCHAR (50)   NULL,
    [mailbox]           VARCHAR (50)   NOT NULL,
    [mailboxMsgId]      VARCHAR (50)   NOT NULL,
    [messageName]       VARCHAR (50)   NOT NULL,
    [partner]           VARCHAR (50)   NULL,
    [receivedDate]      DATETIME       NOT NULL,
    [Status]            VARCHAR (50)   NOT NULL,
    [href]              VARCHAR (150)  NULL,
    [value]             NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSMessage]...';


GO
CREATE TABLE [dbo].[JBMSMessage] (
    [TSWMessageID]        INT           IDENTITY (1, 1) NOT NULL,
    [MessageID]           VARCHAR (50)  NOT NULL,
    [CustomerReference]   VARCHAR (MAX) NOT NULL,
    [DocumentID]          VARCHAR (50)  NOT NULL,
    [Mailbox]             VARCHAR (MAX) NOT NULL,
    [MessageName]         VARCHAR (MAX) NOT NULL,
    [PartnerID]           VARCHAR (50)  NULL,
    [ReceivedDateTime]    DATETIME      NOT NULL,
    [Status]              VARCHAR (50)  NOT NULL,
    [LastUpdatedDateTime] DATETIME      NOT NULL,
    [ErrorCount]          INT           NOT NULL,
    [Submitter]           VARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([TSWMessageID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSPolling]...';


GO
CREATE TABLE [dbo].[JBMSPolling] (
    [JBMSPollingID]       INT          IDENTITY (1, 1) NOT NULL,
    [Submitter]           VARCHAR (50) NOT NULL,
    [EntryID]             VARCHAR (50) NULL,
    [SenderReference]     VARCHAR (50) NULL,
    [MessageID]           VARCHAR (50) NULL,
    [Status]              VARCHAR (50) NOT NULL,
    [LastUpdatedDateTime] DATETIME     NOT NULL,
    PRIMARY KEY CLUSTERED ([JBMSPollingID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSExtMessage]...';


GO
ALTER TABLE [dbo].[JBMSExtMessage]
    ADD DEFAULT getdate() FOR [receivedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSExtMessage]...';


GO
ALTER TABLE [dbo].[JBMSExtMessage]
    ADD DEFAULT 'New' FOR [Status];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD DEFAULT getdate() FOR [ReceivedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD DEFAULT getdate() FOR [LastUpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD DEFAULT 0 FOR [ErrorCount];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSPolling]...';


GO
ALTER TABLE [dbo].[JBMSPolling]
    ADD DEFAULT getdate() FOR [LastUpdatedDateTime];


GO
PRINT N'Creating [dbo].[FK_JBMSAttachment_JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSAttachment] WITH NOCHECK
    ADD CONSTRAINT [FK_JBMSAttachment_JBMSMessage] FOREIGN KEY ([TSWMessageID]) REFERENCES [dbo].[JBMSMessage] ([TSWMessageID]);


GO
PRINT N'Creating [dbo].[sp_GetExtMessage]...';


GO
CREATE PROCEDURE [dbo].[sp_GetExtMessage]
	@PrevMessageID varchar(50) = null
AS
BEGIN
	SET NOCOUNT ON;

	declare @MessageID int
	if (@PrevMessageID is NULL)
	begin
		select @MessageID = min(mailboxMsgId) from JBMSExtMessage
	end
	else
	begin
		select @MessageID = min(mailboxMsgId) from JBMSExtMessage where mailboxMsgId > @PrevMessageID
	end

	select * from JBMSExtMessage where mailboxMsgId = @MessageID

	return @MessageID
END
GO
PRINT N'Creating [dbo].[Sp_GetNextEmail]...';


GO
CREATE PROCEDURE [dbo].[Sp_GetNextEmail]
	@Submitter varchar(50)
AS
BEGIN
	set nocount on

	declare	@busyMessageID int
	SELECT  @busyMessageID = min (TSWMessageID)
	from	JBMSMessage
	where	[Status] = 'InProgress'
	and		Submitter = @Submitter

	if (not @busyMessageID is null)
	Begin
		update	JBMSMessage
		set		[Status] = 'Processed'
		where	TSWMessageID = @busyMessageID
	End

	declare @nextMessageID int
	SELECT  @nextMessageID = min (TSWMessageID)
	from	JBMSMessage
	where	[Status] = 'New'
	and		Submitter = @Submitter

	if (@NextMessageID is null)
		begin
			RETURN	0
		end
	else
		begin
			update  JBMSMessage 
			set		[Status] = 'InProgress'
			where	TSWMessageID = @nextMessageID

			select	*
			from	JBMSMessage M
			left join JBMSAttachment A on A.TSWMessageID = M.TSWMessageID
			where	M.TSWMessageID = @nextMessageID

			RETURN	@nextMessageID
		end
	
	RETURN 0

END
GO
PRINT N'Creating [dbo].[sp_PollingJBMS]...';


GO
CREATE PROCEDURE [dbo].[sp_PollingJBMS]
	@Submitter varchar(50)
AS

	declare @JBMSPollingID int
	declare @JBMSStatus varchar(50)
	select	@JBMSPollingID = JBMSPollingID,
		    @JBMSStatus = [Status] 
	from	JBMSPolling
	where	Submitter = @Submitter

	if @JBMSPollingID is null
	begin
		insert into JBMSPolling
			(Submitter, [Status], LastUpdatedDateTime)
		values
			(@Submitter, 'InProgress', getdate())
		set @JBMSPollingID = @@IDENTITY
	end
	else
	begin
		if(@JBMSStatus) = 'InProgress'
		begin
			set @JBMSPollingID = 0
		end
		else
		begin
			update	JBMSPolling
			set		[Status] = 'InProgress'
			where	Submitter = @Submitter
		end
	end

	select	JBMSPollingID,
			Submitter,
			EntryID,
			SenderReference,
			isnull(MessageID, '0') as MessageID,
			[Status],
			LastUpdatedDateTime,
			getdate() as CurrentDateTime
	from	JBMSPolling
	where	JBMSPollingID = @JBMSPollingID

	RETURN @JBMSPollingID
GO
PRINT N'Creating [dbo].[sp_SaveJBMSMessage]...';


GO
CREATE PROCEDURE [dbo].[sp_SaveJBMSMessage]
	@MessageID VARCHAR(50), 
    @CustomerReference VARCHAR(MAX), 
    @DocumentID VARCHAR(50), 
    @Mailbox VARCHAR(MAX), 
    @MessageName VARCHAR(MAX), 
    @PartnerID VARCHAR(50), 
    @ReceivedDateTime VARCHAR(50),
	@Submitter VARCHAR(50),
	@href VARCHAR(50),
	@AttachmentDocument NVARCHAR(MAX)
AS

	declare @TSWMessageID int

	INSERT into JBMSMessage
	(	
		MessageID, 
		CustomerReference, 
		DocumentID, 
		Mailbox, 
		MessageName, 
		PartnerID,
		ReceivedDateTime,
		[Status], 
		LastUpdatedDateTime,
		ErrorCount,
		Submitter
	)
	values
	(	
		@MessageID, 
		@CustomerReference, 
		@DocumentID, 
		@Mailbox, 
		@MessageName, 
		@PartnerID,
		@ReceivedDateTime,
		'New',  
		getdate(),
		0,
		@Submitter
	)

	set @TSWMessageID = @@IDENTITY

	insert into JBMSAttachment
	(TSWMessageID, href, AttachmentDocument)
	values
	(@TSWMessageID, @href, @AttachmentDocument)

RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdatePolling]...';


GO
CREATE PROCEDURE sp_UpdatePolling
	@EntryID varchar(50),
	@SenderReference varchar(50),
	@MessageID varchar(50),
	@Status varchar(50),
	@JBMSPollingID int
AS
BEGIN
	Update	Polling
	set		EntryID = @EntryID,
			SenderReference = @SenderReference,
			MessageID = @MessageID,
			[Status] = @Status,
			LastUpdatedDateTime = getdate()
	where	JBMSPollingID = @JBMSPollingID

	RETURN 0
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[JBMSAttachment] WITH CHECK CHECK CONSTRAINT [FK_JBMSAttachment_JBMSMessage];


GO
PRINT N'Update complete.';


GO
