/*
Deployment script for JBMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "JBMS"
:setvar DefaultFilePrefix "JBMS"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                DATE_CORRELATION_OPTIMIZATION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[JBMSAttachment]...';


GO
CREATE TABLE [dbo].[JBMSAttachment] (
    [TWSAttachmentID]    INT            IDENTITY (1, 1) NOT NULL,
    [TSWMessageID]       INT            NOT NULL,
    [Href]               VARCHAR (MAX)  NOT NULL,
    [AttachmentDocument] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([TWSAttachmentID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSStatus]...';


GO
CREATE TABLE [dbo].[JBMSStatus] (
    [StatusID] INT          NOT NULL,
    [Status]   VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSMessage]...';


GO
CREATE TABLE [dbo].[JBMSMessage] (
    [TSWMessageID]        INT           IDENTITY (1, 1) NOT NULL,
    [MessageID]           VARCHAR (50)  NOT NULL,
    [CustomerReference]   VARCHAR (MAX) NOT NULL,
    [DocumentID]          VARCHAR (50)  NOT NULL,
    [Mailbox]             VARCHAR (MAX) NOT NULL,
    [MessageName]         VARCHAR (MAX) NOT NULL,
    [PartnerID]           VARCHAR (50)  NULL,
    [ReceivedDateTime]    DATETIME      NOT NULL,
    [StatusID]            INT           NOT NULL,
    [LastUpdatedDateTime] DATETIME      NOT NULL,
    [ErrorCount]          INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([TSWMessageID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSConfiguration]...';


GO
CREATE TABLE [dbo].[JBMSConfiguration] (
    [JBMSConfigurationID] INT           IDENTITY (1, 1) NOT NULL,
    [ConfigurationName]   VARCHAR (50)  NOT NULL,
    [ConfigurationValue]  VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([JBMSConfigurationID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSPolling]...';


GO
CREATE TABLE [dbo].[JBMSPolling] (
    [JBMSPollingID]       INT          IDENTITY (1, 1) NOT NULL,
    [Submitter]           VARCHAR (50) NOT NULL,
    [EntryID]             VARCHAR (50) NULL,
    [SenderReference]     VARCHAR (50) NULL,
    [MessageID]           VARCHAR (50) NULL,
    [StatusID]            INT          NOT NULL,
    [LastUpdatedDateTime] DATETIME     NOT NULL,
    PRIMARY KEY CLUSTERED ([JBMSPollingID] ASC)
);


GO
PRINT N'Creating [dbo].[JBMSExtMessaage]...';


GO
CREATE TABLE [dbo].[JBMSExtMessaage] (
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [MessageID]         VARCHAR (50)  NOT NULL,
    [CustomerReference] VARCHAR (MAX) NOT NULL,
    [DocumentID]        VARCHAR (50)  NOT NULL,
    [Mailbox]           VARCHAR (MAX) NOT NULL,
    [MessageName]       VARCHAR (MAX) NOT NULL,
    [PartnerID]         VARCHAR (50)  NULL,
    [ReceivedDateTime]  DATETIME      NOT NULL,
    [Status]            VARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD DEFAULT getdate() FOR [ReceivedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD DEFAULT getdate() FOR [LastUpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSMessage]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD DEFAULT 0 FOR [ErrorCount];


GO
PRINT N'Creating unnamed constraint on [dbo].[JBMSExtMessaage]...';


GO
ALTER TABLE [dbo].[JBMSExtMessaage]
    ADD DEFAULT getdate() FOR [ReceivedDateTime];


GO
PRINT N'Creating [dbo].[FK_JBMSMessage_JBMSStatus]...';


GO
ALTER TABLE [dbo].[JBMSMessage]
    ADD CONSTRAINT [FK_JBMSMessage_JBMSStatus] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[JBMSStatus] ([StatusID]);


GO
PRINT N'Creating [dbo].[FK_JBMSPolling_JBMSStatus]...';


GO
ALTER TABLE [dbo].[JBMSPolling]
    ADD CONSTRAINT [FK_JBMSPolling_JBMSStatus] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[JBMSStatus] ([StatusID]);


GO
PRINT N'Creating [dbo].[UpdatePolling]...';


GO
CREATE PROCEDURE UpdatePolling
	@EntryID varchar(50),
	@SenderReference varchar(50),
	@MessageID varchar(50),
	@StatusID int,
	@JBMSPollingID int
AS
BEGIN
	Update	Polling
	set		EntryID = @EntryID,
			SenderReference = @SenderReference,
			MessageID = @MessageID,
			StatusID = @StatusID,
			LastUpdatedDateTime = getdate()
	where	JBMSPollingID = @JBMSPollingID

	RETURN 0
END
GO
PRINT N'Creating [dbo].[SaveJBMSMessage]...';


GO
CREATE PROCEDURE [dbo].[SaveJBMSMessage]
	@MessageID VARCHAR(50), 
    @CustomerReference VARCHAR(MAX), 
    @DocumentID VARCHAR(50), 
    @Mailbox VARCHAR(MAX), 
    @MessageName VARCHAR(MAX), 
    @PartnerID VARCHAR(50),
    @StatusID INT,  
    @ErrorCount INT
AS
	INSERT into JBMSMessage
	(	
		MessageID, 
		CustomerReference, 
		DocumentID, 
		Mailbox, 
		MessageName, 
		PartnerID,
		ReceivedDateTime,
		StatusID, 
		LastUpdatedDateTime,
		ErrorCount
	)
	values
	(	
		@MessageID, 
		@CustomerReference, 
		@DocumentID, 
		@Mailbox, 
		@MessageName, 
		@PartnerID,
		getdate(),
		@StatusID,  
		getdate(),
		@ErrorCount
	)



RETURN 0
GO
PRINT N'Creating [dbo].[PollingJBMS]...';


GO
CREATE PROCEDURE [dbo].[PollingJBMS]
	@Submitter varchar(50)
AS

	declare @JBMSPollingID int
	select	@JBMSPollingID = JBMSPollingID 
	from	JBMSPolling
	where	Submitter = @Submitter

	if @JBMSPollingID is null
	begin
		insert into JBMSPolling
			(Submitter, StatusID, LastUpdatedDateTime)
		values
			(@Submitter, 2, getdate())
		set @JBMSPollingID = @@IDENTITY
	end

	select	JBMSPollingID,
			Submitter,
			EntryID,
			SenderReference,
			MessageID,
			StatusID,
			LastUpdatedDateTime
	from	JBMSPolling
	where	JBMSPollingID = @JBMSPollingID

	RETURN @JBMSPollingID
GO
PRINT N'Creating [dbo].[Polling]...';


GO
CREATE PROCEDURE [dbo].[Polling]
	@Submitter varchar(50)
AS

	declare @JBMSPollingID int	
	select	@JBMSPollingID = JBMSPollingID 
	from	JBMSPolling
	where	Submitter = @Submitter

	if @JBMSPollingID is null
	begin
		insert into JBMSPolling
			(Submitter, StatusID, LastUpdatedDateTime)
		values
			(@Submitter, 2, getdate())
		set @JBMSPollingID = @@IDENTITY
	end
	
	RETURN @JBMSPollingID
GO
PRINT N'Creating [dbo].[GetExtMessage]...';


GO
CREATE PROCEDURE [dbo].[GetExtMessage]
	@PrevMessageID varchar(50) = null
AS
BEGIN
	SET NOCOUNT ON;

	declare @MessageID int
	if (@PrevMessageID is NULL)
	begin
		select @MessageID = min(MessageID) from JBMSExtMessage
	end
	else
	begin
		select @MessageID = min(MessageID) from JBMSExtMessage where MessageID > @PrevMessageID
	end

	return @MessageID
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
