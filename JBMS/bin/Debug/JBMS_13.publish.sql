/*
Deployment script for JBMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "JBMS"
:setvar DefaultFilePrefix "JBMS"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file dec9c1e4-99fe-4e83-8ad4-70e18f27f4fa';

PRINT N'Rename [dbo].[JBMSAttachment].[MessageName] to href';


GO
EXECUTE sp_rename @objname = N'[dbo].[JBMSAttachment].[MessageName]', @newname = N'href', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[sp_GetNextEmail]...';


GO
ALTER PROCEDURE [dbo].[sp_GetNextEmail]
AS
BEGIN
	set nocount on

	declare	@busyMessageID int
	SELECT  @busyMessageID = min (TSWMessageID)
	from	JBMSMessage
	where	[Status] = 'InProgress'

	if (not @busyMessageID is null)
	Begin
		update	JBMSMessage
		set		[Status] = 'Processed'
		where	TSWMessageID = @busyMessageID
	End

	declare @nextMessageID int
	SELECT  @nextMessageID = min (TSWMessageID)
	from	JBMSMessage
	where	[Status] = 'New'

	if (@NextMessageID is null)
		begin
			RETURN	0
		end
	else
		begin
			update  JBMSMessage 
			set		[Status] = 'InProgress'
			where	TSWMessageID = @nextMessageID

			select	*
			from	JBMSMessage M
			left join JBMSAttachment A on A.TSWMessageID = M.TSWMessageID
			where	M.TSWMessageID = @nextMessageID

			RETURN	@nextMessageID
		end
END
GO
PRINT N'Creating [dbo].[sp_GetExtMessage]...';


GO
CREATE PROCEDURE [dbo].[sp_GetExtMessage]
	@PrevMessageID varchar(50) = null
AS
BEGIN
	SET NOCOUNT ON;

	declare @MessageID int
	if (@PrevMessageID is NULL)
	begin
		select @MessageID = min(MessageID) from JBMSExtMessaage
	end
	else
	begin
		select @MessageID = min(MessageID) from JBMSExtMessaage where MessageID > @PrevMessageID
	end

	select * from JBMSExtMessaage where MessageID = @MessageID

	return @MessageID
END
GO
PRINT N'Creating [dbo].[sp_PollingJBMS]...';


GO
CREATE PROCEDURE [dbo].[sp_PollingJBMS]
	@Submitter varchar(50)
AS

	declare @JBMSPollingID int
	declare @JBMSStatus varchar(50)
	select	@JBMSPollingID = JBMSPollingID,
		    @JBMSStatus = [Status] 
	from	JBMSPolling
	where	Submitter = @Submitter

	if @JBMSPollingID is null
	begin
		insert into JBMSPolling
			(Submitter, [Status], LastUpdatedDateTime)
		values
			(@Submitter, 'InProgress', getdate())
		set @JBMSPollingID = @@IDENTITY
	end
	else
	begin
		if(@JBMSStatus) = 'InProgress'
		begin
			set @JBMSPollingID = 0
		end
		else
		begin
			update	JBMSPolling
			set		[Status] = 'InProgress'
			where	Submitter = @Submitter
		end
	end

	select	JBMSPollingID,
			Submitter,
			EntryID,
			SenderReference,
			isnull(MessageID, '0') as MessageID,
			[Status],
			LastUpdatedDateTime,
			getdate() as CurrentDateTime
	from	JBMSPolling
	where	JBMSPollingID = @JBMSPollingID

	RETURN @JBMSPollingID
GO
PRINT N'Creating [dbo].[sp_SaveJBMSMessage]...';


GO
CREATE PROCEDURE [dbo].[sp_SaveJBMSMessage]
	@MessageID VARCHAR(50), 
    @CustomerReference VARCHAR(MAX), 
    @DocumentID VARCHAR(50), 
    @Mailbox VARCHAR(MAX), 
    @MessageName VARCHAR(MAX), 
    @PartnerID VARCHAR(50),
    @Status VARCHAR(50),  
    @ErrorCount INT,
	@href VARCHAR(50),
	@AttachmentDocument NVARCHAR(MAX)
AS

	declare @TSWMessageID int

	INSERT into JBMSMessage
	(	
		MessageID, 
		CustomerReference, 
		DocumentID, 
		Mailbox, 
		MessageName, 
		PartnerID,
		ReceivedDateTime,
		[Status], 
		LastUpdatedDateTime,
		ErrorCount
	)
	values
	(	
		@MessageID, 
		@CustomerReference, 
		@DocumentID, 
		@Mailbox, 
		@MessageName, 
		@PartnerID,
		getdate(),
		@Status,  
		getdate(),
		@ErrorCount
	)

	set @TSWMessageID = @@IDENTITY

	insert into JBMSAttachment
	(TSWMessageID, href, AttachmentDocument)
	values
	(@TSWMessageID, @href, @AttachmentDocument)


RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdatePolling]...';


GO
CREATE PROCEDURE sp_UpdatePolling
	@EntryID varchar(50),
	@SenderReference varchar(50),
	@MessageID varchar(50),
	@Status varchar(50),
	@JBMSPollingID int
AS
BEGIN
	Update	Polling
	set		EntryID = @EntryID,
			SenderReference = @SenderReference,
			MessageID = @MessageID,
			[Status] = @Status,
			LastUpdatedDateTime = getdate()
	where	JBMSPollingID = @JBMSPollingID

	RETURN 0
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dec9c1e4-99fe-4e83-8ad4-70e18f27f4fa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dec9c1e4-99fe-4e83-8ad4-70e18f27f4fa')

GO

GO
PRINT N'Update complete.';


GO
